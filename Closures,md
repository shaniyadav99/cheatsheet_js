
# JavaScript Closures and Lexical Environment Cheat Sheet

## 1. What is a Closure?
- **Closure**: A function that retains access to variables in its lexical scope even after the outer function has finished execution.
- **Key Features**:
  - Preserves variables from its lexical environment.
  - Enables data privacy and stateful functions.

### Example:
```javascript
function outer() {
  let outerVar = "Outer";
  
  function inner() {
    console.log(outerVar);  // Access outerVar
  }
  
  return inner;
}

const closure = outer();
closure();  // Output: Outer
```

## 2. Lexical Environment
- **Lexical Environment**: Stores variables and function bindings; functions can access their own environment and outer environments.
- **Scope Chain**: Enables closures to capture variables from the parent scope.

### Example:
```javascript
function greet() {
  let name = "Alice";
  
  return function() {
    console.log("Hello, " + name);
  };
}

let sayHello = greet();
sayHello();  // Output: Hello, Alice
```

## 3. Practical Applications of Closures

### 3.1 Data Privacy (Encapsulation)
- Create private variables using closures, providing controlled access through specific functions.

### Example:
```javascript
function createCounter() {
  let count = 0;  // Private variable
  
  return {
    increment: function() { count++; return count; },
    getCount: function() { return count; }
  };
}

const counter = createCounter();
console.log(counter.increment());  // Output: 1
console.log(counter.getCount());   // Output: 1
```

### 3.2 Function Factories
- Create customized functions by returning a new function that retains variables from its lexical environment.

### Example:
```javascript
function createMultiplier(multiplier) {
  return function (number) {
    return number * multiplier;
  };
}

const double = createMultiplier(2);
const triple = createMultiplier(3);

console.log(double(5));  // Output: 10
console.log(triple(5));  // Output: 15
```

## 4. Common Patterns: IIFE and Scope Pollution

### 4.1 Immediately Invoked Function Expressions (IIFE)
- IIFE creates a new scope, preventing variables from leaking into the global scope.

### Example:
```javascript
(function () {
  let secret = "I am private";
  console.log(secret);  // Output: I am private
})();
```

### 4.2 Avoiding Scope Pollution
- Use IIFEs and closures to contain variables in localized scopes, reducing scope pollution.

## 5. Memory Management: Avoiding Memory Leaks
- Closures can lead to memory leaks by retaining references to large or unnecessary variables.
- **Best Practices**:
  - Release references when closures are no longer needed.
  - Be mindful of long-lived closures with large data structures.

## 6. Debugging Closures
- Use developer tools (like Chrome DevTools) to inspect closures.
  - Set breakpoints inside closures to view captured variables.
  - Use memory profiling tools to identify potential memory leaks.
